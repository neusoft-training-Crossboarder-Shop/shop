<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neu.train.project.wallet.mapper.WtaWalletTransactionAduitMapper" >
  <resultMap id="BaseResultMap" type="neu.train.project.wallet.pojo.WtaWalletTransactionAduit" >
    <constructor >
      <idArg column="transaction_audit_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="buyer_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="transaction_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="available_money_before" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="depositing_money_before" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="withdrawing_money_before" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="operate_money" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="operate_type" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="available_money_after" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="depositing_money_after" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="withdrawing_money_after" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="operate_by" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="created_By" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="last_update_by" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="last_update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    transaction_audit_id, buyer_id, transaction_id, available_money_before, depositing_money_before, 
    withdrawing_money_before, operate_money, operate_type, available_money_after, depositing_money_after, 
    withdrawing_money_after, operate_by, status, created_By, create_time, last_update_by, 
    last_update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="neu.train.project.wallet.pojo.WtaWalletTransactionAduitExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from wta_wallet_transaction_aduit
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="neu.train.project.wallet.pojo.WtaWalletTransactionAduitExample" >
    delete from wta_wallet_transaction_aduit
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="neu.train.project.wallet.pojo.WtaWalletTransactionAduit" >
    <selectKey resultType="java.lang.Integer" keyProperty="transactionAuditId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into wta_wallet_transaction_aduit
    <trim prefix="(" suffix=")" suffixOverrides="," >
      transaction_audit_id,
      <if test="buyerId != null" >
        buyer_id,
      </if>
      <if test="transactionId != null" >
        transaction_id,
      </if>
      <if test="availableMoneyBefore != null" >
        available_money_before,
      </if>
      <if test="depositingMoneyBefore != null" >
        depositing_money_before,
      </if>
      <if test="withdrawingMoneyBefore != null" >
        withdrawing_money_before,
      </if>
      <if test="operateMoney != null" >
        operate_money,
      </if>
      <if test="operateType != null" >
        operate_type,
      </if>
      <if test="availableMoneyAfter != null" >
        available_money_after,
      </if>
      <if test="depositingMoneyAfter != null" >
        depositing_money_after,
      </if>
      <if test="withdrawingMoneyAfter != null" >
        withdrawing_money_after,
      </if>
      <if test="operateBy != null" >
        operate_by,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createdBy != null" >
        created_By,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastUpdateBy != null" >
        last_update_by,
      </if>
      <if test="lastUpdateTime != null" >
        last_update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{transactionAuditId,jdbcType=INTEGER},
      <if test="buyerId != null" >
        #{buyerId,jdbcType=INTEGER},
      </if>
      <if test="transactionId != null" >
        #{transactionId,jdbcType=INTEGER},
      </if>
      <if test="availableMoneyBefore != null" >
        #{availableMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="depositingMoneyBefore != null" >
        #{depositingMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="withdrawingMoneyBefore != null" >
        #{withdrawingMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="operateMoney != null" >
        #{operateMoney,jdbcType=DECIMAL},
      </if>
      <if test="operateType != null" >
        #{operateType,jdbcType=TINYINT},
      </if>
      <if test="availableMoneyAfter != null" >
        #{availableMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="depositingMoneyAfter != null" >
        #{depositingMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="withdrawingMoneyAfter != null" >
        #{withdrawingMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="operateBy != null" >
        #{operateBy,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createdBy != null" >
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateBy != null" >
        #{lastUpdateBy,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateTime != null" >
        #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="neu.train.project.wallet.pojo.WtaWalletTransactionAduitExample" resultType="java.lang.Integer" >
    select count(*) from wta_wallet_transaction_aduit
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update wta_wallet_transaction_aduit
    <set >
      <if test="record.transactionAuditId != null" >
        transaction_audit_id = #{record.transactionAuditId,jdbcType=INTEGER},
      </if>
      <if test="record.buyerId != null" >
        buyer_id = #{record.buyerId,jdbcType=INTEGER},
      </if>
      <if test="record.transactionId != null" >
        transaction_id = #{record.transactionId,jdbcType=INTEGER},
      </if>
      <if test="record.availableMoneyBefore != null" >
        available_money_before = #{record.availableMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.depositingMoneyBefore != null" >
        depositing_money_before = #{record.depositingMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.withdrawingMoneyBefore != null" >
        withdrawing_money_before = #{record.withdrawingMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.operateMoney != null" >
        operate_money = #{record.operateMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.operateType != null" >
        operate_type = #{record.operateType,jdbcType=TINYINT},
      </if>
      <if test="record.availableMoneyAfter != null" >
        available_money_after = #{record.availableMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.depositingMoneyAfter != null" >
        depositing_money_after = #{record.depositingMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.withdrawingMoneyAfter != null" >
        withdrawing_money_after = #{record.withdrawingMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.operateBy != null" >
        operate_by = #{record.operateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.createdBy != null" >
        created_By = #{record.createdBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastUpdateBy != null" >
        last_update_by = #{record.lastUpdateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.lastUpdateTime != null" >
        last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update wta_wallet_transaction_aduit
    set transaction_audit_id = #{record.transactionAuditId,jdbcType=INTEGER},
      buyer_id = #{record.buyerId,jdbcType=INTEGER},
      transaction_id = #{record.transactionId,jdbcType=INTEGER},
      available_money_before = #{record.availableMoneyBefore,jdbcType=DECIMAL},
      depositing_money_before = #{record.depositingMoneyBefore,jdbcType=DECIMAL},
      withdrawing_money_before = #{record.withdrawingMoneyBefore,jdbcType=DECIMAL},
      operate_money = #{record.operateMoney,jdbcType=DECIMAL},
      operate_type = #{record.operateType,jdbcType=TINYINT},
      available_money_after = #{record.availableMoneyAfter,jdbcType=DECIMAL},
      depositing_money_after = #{record.depositingMoneyAfter,jdbcType=DECIMAL},
      withdrawing_money_after = #{record.withdrawingMoneyAfter,jdbcType=DECIMAL},
      operate_by = #{record.operateBy,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      created_By = #{record.createdBy,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      last_update_by = #{record.lastUpdateBy,jdbcType=VARCHAR},
      last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="neu.train.project.wallet.pojo.WtaWalletTransactionAduit" >
    update wta_wallet_transaction_aduit
    <set >
      <if test="buyerId != null" >
        buyer_id = #{buyerId,jdbcType=INTEGER},
      </if>
      <if test="transactionId != null" >
        transaction_id = #{transactionId,jdbcType=INTEGER},
      </if>
      <if test="availableMoneyBefore != null" >
        available_money_before = #{availableMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="depositingMoneyBefore != null" >
        depositing_money_before = #{depositingMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="withdrawingMoneyBefore != null" >
        withdrawing_money_before = #{withdrawingMoneyBefore,jdbcType=DECIMAL},
      </if>
      <if test="operateMoney != null" >
        operate_money = #{operateMoney,jdbcType=DECIMAL},
      </if>
      <if test="operateType != null" >
        operate_type = #{operateType,jdbcType=TINYINT},
      </if>
      <if test="availableMoneyAfter != null" >
        available_money_after = #{availableMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="depositingMoneyAfter != null" >
        depositing_money_after = #{depositingMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="withdrawingMoneyAfter != null" >
        withdrawing_money_after = #{withdrawingMoneyAfter,jdbcType=DECIMAL},
      </if>
      <if test="operateBy != null" >
        operate_by = #{operateBy,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="createdBy != null" >
        created_By = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateBy != null" >
        last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateTime != null" >
        last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where transaction_audit_id = #{transactionAuditId,jdbcType=INTEGER}
  </update>

  <resultMap type="neu.train.project.wallet.pojo.WtaWalletTransactionAduit" id="transactionAudit">
    <id     property="transactionAuditId"      column="transaction_audit_id"      />
    <result property="buyerId"    column="buyer_id"    />
    <result property="transactionId"     column="transaction_id"     />
    <result property="availableMoneyBefore"   column="available_money_before"   />
    <result property="depositingMoneyBefore"    column="depositing_money_before"    />
    <result property="withdrawingMoneyBefore"      column="withdrawing_money_before"      />
    <result property="operateMoney"    column="operate_money"    />
    <result property="operateType"      column="operate_type"      />
    <result property="availableMoneyAfter"    column="available_money_after"    />
    <result property="depositingMoneyAfter"    column="depositing_money_after"    />
    <result property="withdrawingMoneyAfter"    column="withdrawing_money_after"    />
    <result property="operateBy"    column="operate_by"    />
    <result property="status"    column="status"    />
    <result property="createdBy"    column="created_By"    />
    <result property="createTime"    column="create_time"    />
    <result property="lastUpdateBy"    column="last_update_by"    />
    <result property="lastUpdateTime"    column="last_update_time"    />
  </resultMap>

  <sql id="selectA">
    select transaction_audit_id, buyer_id, transaction_id, operate_type ,available_money_before, depositing_money_before, withdrawing_money_before, operate_money, operate_type, available_money_after, depositing_money_after,withdrawing_money_after,operate_by,status,created_By,create_time,last_update_by,last_update_time
    from wta_wallet_transaction_aduit
  </sql>

  <select id="selectByMany" parameterType="neu.train.project.wallet.vo.GetAnAuditQuery" resultMap="transactionAudit">
    <include refid="selectA"/>
    <where>
      <if test="buyerId != null and buyerId != '' and buyerId!=0">
        AND buyer_id = #{buyerId}
      </if>
      <if test="transactionId != null and transactionId != '' and transactionId!=0">
        AND transaction_id = #{transactionId}
      </if>
      <if test="operateType != null and operateType != '' ">
        AND operate_type = #{operateType}
      </if>
      <if test="status != null and status != '' ">
        AND status = #{status}
      </if>
      <if test="beginTime != null and beginTime != ''"><!-- Start  time检索 -->
        and date_format(create_time,'%y%m%d') &gt;= date_format(#{beginTime},'%y%m%d')
      </if>
      <if test="endTime != null and endTime != ''"><!-- End   time检索 -->
        and date_format(create_time,'%y%m%d') &lt;= date_format(#{endTime},'%y%m%d')
      </if>
    </where>
    order by create_time desc
  </select>


  <select id="selectByIds" resultMap="transactionAudit">
    select * from wta_wallet_transaction_aduit
    where transaction_audit_id in
    <foreach item="transactionAuditId" collection="array" open="(" separator="," close=")">
        #{transactionAuditId}
      </foreach>
  </select>


</mapper>